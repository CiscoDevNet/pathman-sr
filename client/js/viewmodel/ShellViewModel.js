(function (nx) {
    var bgp = new nx.data.ObservableObject({
        name: 'BGP',
        icon: 'n-icon-BGP',
        status: '',
        url: './apps/bgp/index.html',
        description: 'This app displays the IGP (OSPF/ISIS) topology and link attributes. This information is provided to the app across a RESTCONF API generated by the ODL controller and based on a BGP link-state data model.  BGP-LS is running between the ODL controller and a BGP-LS speaker in the network.'
    });

    var acl = new nx.data.ObservableObject({
        name: 'ACL',
        icon: 'n-icon-acl',
        status: '',
        url: './apps/acl/index.html',
        description: 'This app enables the configuration of Access Control Lists (ACLs) on IOS-XR routers. The app can read and write ACL configuration information across a RESTCONF API generated by the ODL controller based on IOS XR YANG data models. A Netconf session is stablished between the ODL controller and each IOS-XR router.'
    });

    var of = new nx.data.ObservableObject({
        name: 'OpenFlow',
        icon: 'n-icon-openflow',
        status: '',
        url: './apps/ofp/index.html',
        description: 'This app provides visualization of an Openflow network topology and programming (create, delete, modify and show) of flow entries on Openflow devices. RESTCONF APIs generated by the ODL controller and based on Openflow YANG data models defining various flow management actions are exposed to and consumed by the app.'
    });

    var next = new nx.data.ObservableObject({
        name: 'NeXt',
        icon: 'fa-anchor',
        status: '',
        url: 'http://xq.cisco.com/next/NeXtSite/',
        description: 'NeXt UI toolkit is an HTML5/JavaScript based toolkit for network web application. It is the evolution of FRUIT (a web frontend toolkit enabling collaboration-engineering teams to build consistent experience, high performance, high quality and easy to maintain applications which is adopted by several collaboration products including WebEx, HCS etc.) for network experience.'
    });

    var i2ss = new nx.data.ObservableObject({
        name: 'I2SS',
        icon: 'n-icon-GroupM',
        status: '',
        url: 'http://172.23.29.110/i2ss/admin.html',
        description: 'This app enables dynamic topology-aware service provisioning using NETCONF/YANG. The demo use-case is "routing in the cloud", with an E-Line created between a client site and a CSR1Kv instance which is spun up on-demand using OpenStack.  The app dynamically discovers the MPLS PEs connected to the two endpoints and configures a pseudowire between them - enabling automatic re-provisioning if access switches are re-homed to different MPLS PEs'
    });

    var rcv = new nx.data.ObservableObject({
        name: 'RCV',
        icon: 'n-icon-RCV',
        status: '',
        url: './apps/rcv/index.html',
        description: 'This app retrieves and correlates RCMD data collected by each router during a convergence event. It uses a BGP-LS ODL topology for reference to show network-wide flooding paths and per-router SPF statistics. RCV also computes critical prefix convergence times to determine SLA conformance.'
    });

    var pgn = new nx.data.ObservableObject({
        name: 'PGN',
        icon: 'n-icon-PGN',
        status: '',
        url: 'http://10.195.88.241:8090/PGN/',
        description: 'Policy Group Networking leverages the OpenDaylight SDN Controller to provide group-based policy management for Access Management, Quality of Service and Path Selection on existing Cisco routers and switches.'
    });

    var editor = new nx.data.ObservableObject({
        name: 'Topology-Editor',
        icon: 'n-icon-co-edit',
        status: '',
        url: './apps/tce/index.html',
        description: 'This app enables topology diagram design and collaboration for multiple users. Users can do network planning and simulation based on current topology which is invoked by Opendaylight. Simultaneous co-editing allows users to work on topology in real-time by adding nodes, deleting nodes, drawing links between nodes, etc.'
    });

    var yang = new nx.data.ObservableObject({
        name: 'YANG model visualize',
        icon: 'n-icon-aggregation',
        status: '',
        url: './apps/rev/index.html',
        description: 'This app enables topology diagram design and collaboration for multiple users. Users can do network planning and simulation based on current topology which is invoked by Opendaylight. Simultaneous co-editing allows users to work on topology in real-time by adding nodes, deleting nodes, drawing links between nodes, etc.'
    });

    nx.define('odl.ShellViewModel', nx.data.ObservableObject, {
        properties: {
            availableApps: {
                get: function () {
                    return this._availableApps;
                }
            },
            loadedApps: {
                get: function () {
                    return this._loadedApps;
                }
            },
            favoriteApps: {
                get: function () {
                    return this._favoriteApps;
                }
            },
            activeApp: {
                get: function () {
                    return this._activeApp;
                },
                set: function (value) {
                    var currentApp = this._activeApp;

                    if (currentApp) {
                        currentApp.set('status', currentApp.get('status').replace('active', '').trim());
                    }

                    currentApp = this._activeApp = value;

                    if (currentApp) {
                        currentApp.set('status', currentApp.get('status') + ' active');
                        this.overviewStatus('');
                    }
                    else {
                        this.overviewStatus('active');
                    }
                }
            },
            navStatus: '',
            overviewStatus: 'active',
            account: null,
            loginStatus: '',
            loginMessage: ''
        },
        methods: {
            init: function () {
                this.inherited();
                this._account = {
                    username: '',
                    password: ''
                };
                this._availableApps = new nx.data.ObservableCollection([bgp, acl, of, i2ss, rcv, pgn, editor,yang]);
                this._loadedApps = new nx.data.ObservableCollection();
                this._favoriteApps = new nx.data.ObservableCollection([bgp, acl, of, pgn, rcv]);

                if (location.search.indexOf('surprise') > 0) {
                    this.surprise();
                }
            },
            login: function (sender, event) {
                if (location.search.indexOf('development') > 0 || location.search.indexOf('surprise') > 0) {
                    this.loginStatus('active');
                }
                else {
                    var self = this;
                    nx.HttpClient.POST('odlsignin', {
                        user: this._account.username,
                        pass: this._account.password
                    }, function (data) {
                        if (data.success) {
                            self.loginMessage('');
                            self.loginStatus('active');
                        }
                        else {
                            self.loginStatus('active');
//                            self.loginMessage('Login failed.');
                        }
                    });
                }
            },
            logout: function (sender, event) {
                this.loginStatus('');
            },
            loadApp: function (sender, event) {
                var app = sender.model();
                if (!this._loadedApps.contains(app)) {
                    this._loadedApps.add(app);
                }

                this.activeApp(app);
                this.closeNav();
            },
            unloadApp: function (sender, event) {
                var app = sender.model();
                var loadedApps = this._loadedApps;
                if (loadedApps.contains(app)) {
                    loadedApps.remove(app);
                }

                if (app.get('status').indexOf('active') >= 0) {
                    this.activeApp(loadedApps.getItem(0) || null);
                }
            },
            openNav: function () {
                this.navStatus('expand');
            },
            closeNav: function () {
                this.navStatus('');
            },
            toggleNav: function () {
                if (this.navStatus() === 'expand') {
                    this.navStatus('');
                }
                else {
                    this.navStatus('expand');
                }
            },
            showInfo: function (sender) {
                var model = sender.model();
                model.set('status', model.get('status') + ' highlight');
            },
            hideInfo: function (sender) {
                var model = sender.model();
                model.set('status', model.get('status').replace('highlight', '').trim());
            },
            surprise: function () {
                var self = this;
                setTimeout(function () {
                    self.account({
                        username: 'admin',
                        password: 'admin'
                    });
                }, 2000);

                setTimeout(function () {
                    self.login();
                }, 3000);

                setTimeout(function () {
                    bgp.set('status', 'highlight');
                }, 4000);

                setTimeout(function () {
                    bgp.set('status', '');
                    acl.set('status', 'highlight');
                }, 6000);

                setTimeout(function () {
                    acl.set('status', '');
                    rcv.set('status', 'highlight');
                }, 8000);

                setTimeout(function () {
                    rcv.set('status', '');
                    self.openNav();
                }, 10000);

                setTimeout(function () {
                    self._availableApps.add(new nx.data.ObservableObject({
                        name: 'Apple',
                        icon: 'fa-apple',
                        status: '',
                        url: 'http://www.apple.com'
                    }));
                }, 11000);

                setTimeout(function () {
                    self._availableApps.add(new nx.data.ObservableObject({
                        name: 'Facebook',
                        icon: 'fa-facebook',
                        status: '',
                        url: 'http://www.facebook.com'
                    }));
                }, 11300);

                setTimeout(function () {
                    self._availableApps.add(new nx.data.ObservableObject({
                        name: 'Twitter',
                        icon: 'fa-twitter',
                        status: '',
                        url: 'http://www.twitter.com'
                    }));
                }, 11500);

                setTimeout(function () {
                    self._availableApps.add(new nx.data.ObservableObject({
                        name: 'GitHub',
                        icon: 'fa-github',
                        status: '',
                        url: 'http://www.github.com'
                    }));
                }, 11600);

                setTimeout(function () {
                    self._availableApps.add(new nx.data.ObservableObject({
                        name: 'Youtube',
                        icon: 'fa-youtube',
                        status: '',
                        url: 'http://www.youtube.com'
                    }));
                }, 11700);

                setTimeout(function () {
                    self._availableApps.add(new nx.data.ObservableObject({
                        name: 'Dribbble',
                        icon: 'fa-dribbble',
                        status: '',
                        url: 'http://www.dribbble.com'
                    }));
                }, 11800);

                setTimeout(function () {
                    self.closeNav();
                }, 13000);

                setTimeout(function () {
                    self._loadedApps.add(bgp);
                    self.activeApp(bgp);
                }, 15000);

                setTimeout(function () {
                    self._loadedApps.add(acl);
                    self.activeApp(acl);
                }, 19000);

                setTimeout(function () {
                    self._loadedApps.add(rcv);
                    self.activeApp(rcv);
                }, 23000);

                setTimeout(function () {
                    self.activeApp(acl);
                }, 27000);

                setTimeout(function () {
                    self._loadedApps.remove(bgp);
                }, 31000);

                setTimeout(function () {
                    self._loadedApps.remove(acl);
                    self.activeApp(rcv);
                }, 35000);

                setTimeout(function () {
                    self.openNav();
                }, 37000);

                setTimeout(function () {
                    var apps = self._availableApps;
                    apps.removeAt(7);
                    apps.removeAt(7);
                    apps.removeAt(7);
                    apps.removeAt(7);
                    apps.removeAt(7);
                    apps.removeAt(7);

                }, 39000);

                setTimeout(function () {
                    self._loadedApps.remove(self._loadedApps.getItem(0));
                    self.activeApp(null);
                }, 41000);

                setTimeout(function () {
                    self.closeNav();
                }, 43000);

                setTimeout(function () {
                    self.account(null);
                    self.logout();
                }, 45000);
            }
        }
    });
})(nx);